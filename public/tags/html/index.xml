<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTML on morganwebdev&#39;s blog</title>
    <link>https://morganwebdev.org/tags/html/</link>
    <description>Recent content in HTML on morganwebdev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Morgan Murrah</copyright>
    <lastBuildDate>Sat, 13 Aug 2022 12:00:00 -0800</lastBuildDate><atom:link href="https://morganwebdev.org/tags/html/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playwright: My intro</title>
      <link>https://morganwebdev.org/posts/playwright/</link>
      <pubDate>Sat, 13 Aug 2022 12:00:00 -0800</pubDate>
      
      <guid>https://morganwebdev.org/posts/playwright/</guid>
      <description>I am enamored with Playwright. End to end integration testing is a huge topic but I can tell you just a few things about my experience from helping to integrate JavaScript E2E tests at work and in my spare time projects:
First, I have to say I am sure I would have been enamored with experiencing the joy and utility of E2E testing with other frameworks as well including Cypress or TestCafe but Playwright is my first.</description>
    </item>
    
    <item>
      <title>Paring down with AMP</title>
      <link>https://morganwebdev.org/posts/paring-down-with-amp/</link>
      <pubDate>Sat, 21 May 2022 12:00:00 -0800</pubDate>
      
      <guid>https://morganwebdev.org/posts/paring-down-with-amp/</guid>
      <description>morganwebdev.com This is a post about my experience of simplifying my personal website down to an AMP page. My philosophy was incremental improvement using the validator and lighthouse test audits as guides. Additionally I added basic service worker functionality with the amp-install-serviceworker tag.
The result is an excellent lighthouse score and a pretty excellent WebPageTest score on Core Web Vitals:
I followed a number of steps to achieve this namely size bounding and inlining CSS and using the excellent Super Tiny Icons Repository</description>
    </item>
    
    <item>
      <title>Paring down with Parcel.js</title>
      <link>https://morganwebdev.org/posts/paring-down-with-parcel/</link>
      <pubDate>Fri, 11 Jun 2021 12:00:00 -0800</pubDate>
      
      <guid>https://morganwebdev.org/posts/paring-down-with-parcel/</guid>
      <description>This is a small blog about how I pared down my personal website to a single page of HTML bundled with parcel.js. This was a change from a PWA Vue-CLI generated site using Webpack. I write this to express my appreciation of making maintenance easy and simplicity where possible.
Link to the Repository
What I want out of a personal website or &amp;lsquo;my personal bag of hyperlinks&amp;rsquo;. I want people to be able to click and find almost my entire web presence linked from one place on mobile or desktop.</description>
    </item>
    
  </channel>
</rss>
